{"body":"I've found that it doesn't matter what project I'm working on, there are a few utilities that I always need and end up writing over and over again. Enough of that.\r\n\r\n### Introducing screwdriver.js\r\n\r\nscrewdriver.js contains the following utilities:\r\n\r\n#### String\r\n* startsWith\r\n* endsWith\r\n* format\r\n* isEmailAddress\r\n* isPhoneNumber\r\n\r\n#### Array\r\n* shuffle\r\n* max\r\n* min\r\n* isEmpty\r\n* peek\r\n* search\r\n\r\n#### Object\r\n* isIdenticalTo\r\n* duplicate\r\n* isArray\r\n* isEmpty\r\n* size\r\n\r\n#### Data Structures\r\n* LinkedHashMap\r\n\r\n# String.prototype\r\n\r\n### .startsWith( str ) \r\n> Determines whether the string begins with the given substring.\r\n> #### Arguments\r\n> **str** - The substring to search for.\r\n> #### Returns\r\n> **bool** - Whether or not the string starts with **str**.\r\n> ```\r\n> 'screwdriver'.startsWith('screw'); // true\r\n> ```\r\n\r\n***\r\n\r\n### .endsWith( str ) \r\n> Determines whether the string ends with the given substring.\r\n> #### Arguments\r\n> **str** - The substring to search for.\r\n> #### Returns\r\n> **bool** - Whether or not the string ends with **str**.\r\n> ```\r\n> 'screwdriver'.endsWith('driver'); // true\r\n> ```\r\n\r\n***\r\n\r\n### .format( arg0, arg1, arg2, ... ) \r\n> Replaces placeholder strings with the arguments passed in.\r\n> _Placeholders are of the format **{i}** with **i** being the index of the argument with which to replace it._\r\n> #### Arguments\r\n> **args** - Any number of string arguments to replace the corresponding placeholders.\r\n> #### Returns\r\n> **string** - The formatted string with all of the placeholders filled in with values.\r\n\r\n> ```\r\n> '{0} out of {1}'.format(8, 10); // '8 out of 10'\r\n> ```\r\n\r\n***\r\n\r\n### .isEmailAddress() \r\n> Validates that the string is a properly formatted email address.\r\n> #### Returns\r\n> **bool** - Whether or not the string is a valid email address\r\n\r\n> ```\r\n> 'screw@driver.com'.isEmailAddress(); // true\r\n> ```\r\n\r\n***\r\n\r\n### .isPhoneNumber() \r\n> Validates that the string is a properly formatted phone number.\r\n> #### Returns\r\n> **bool** - Whether or not the string is a valid phone number\r\n\r\n> ```\r\n> '555 555 5555'.isPhoneNumber(); // true\r\n> '(555) 555-5555'.isPhoneNumber(); // true\r\n> '555-555-5555'.isPhoneNumber(); // true\r\n> ```\r\n\r\n# Array.prototype\r\n\r\n### .shuffle() \r\n> Randomly shuffles the contents of the array in place.\r\n> #### Returns\r\n> **array** - The shuffled array. Note: the array is shuffled in place.\r\n> ```\r\n> [1, 2, 3, 4].shuffle(); // [2, 4, 3, 1]\r\n> ```\r\n\r\n***\r\n\r\n### .max() \r\n> Gets the max value from the array.\r\n> #### Returns\r\n> **object** - The max value of the array.\r\n> ```\r\n> [2, 4, 1, 3].max(); // 4\r\n> ```\r\n\r\n***\r\n\r\n### .min() \r\n> Gets the min value from the array.\r\n> #### Returns\r\n> **object** - The min value of the array.\r\n> ```\r\n> [2, 4, 1, 3].min(); // 1\r\n> ```\r\n\r\n***\r\n\r\n### .isEmpty() \r\n> Determines whether the array has any elements.\r\n> #### Returns\r\n> **bool** - Whether or not the array has any elements.\r\n> ```\r\n> [].isEmpty(); // true\r\n> ```\r\n\r\n***\r\n\r\n### .peek() \r\n> Returns the element at the top of the stack without removing it\r\n> #### Returns\r\n> **object** - Element at the top of the stack. Null if the stack is empty.\r\n> ```\r\n> [1, 2, 3, 4].peek(); // 4\r\n> ```\r\n\r\n***\r\n\r\n### .search( object ) \r\n> Finds the 1-based index of the object in the stack.\r\n> #### Returns\r\n> **int** - 1-based index of the object in the stack calculated from the top of the stack. -1 if the item is not found in the stack.\r\n> ```\r\n> [1, 2, 1, 3].search(3); // 1\r\n> [1, 2, 1, 3].search(1); // 2\r\n> [1, 2, 1, 3].search(0); // -1\r\n> ```\r\n\r\n# Object.prototype\r\n\r\n### .isIdenticalTo( obj ) \r\n> Determines if the object is identical to **obj**\r\n> #### Arguments\r\n> **obj** - The compare object.\r\n> #### Returns\r\n> **bool** - Whether or not the two objects have identical values. This is a recursive check.\r\n> ```\r\n> { a: 1 }.isIdenticalTo({ a: 1 }); // true\r\n> ```\r\n\r\n***\r\n\r\n### .duplicate() \r\n> Creates a new object with identical recursive properties\r\n> #### Returns\r\n> **object** - A new object with all of the property values copied. The object is completely duplicated in memory.\r\n> ```\r\n> var a = { a: 1 }.duplicate();\r\n> a.isIdenticalTo({ a: 1 }); // true\r\n> a === { a: 1 }; // false\r\n> ```\r\n\r\n***\r\n\r\n### .isEmpty() \r\n> Determines whether the object has any children.\r\n> #### Returns\r\n> **bool** - Whether or not the object has any elements.\r\n> ```\r\n> {}.isEmpty(); // true\r\n> ```\r\n\r\n***\r\n\r\n### .size() \r\n> Determines the number of children the object has\r\n> #### Returns\r\n> **int** - The number of children in the object\r\n> ```\r\n> { a: 1, b: 2 }.size(); // 2\r\n> ```\r\n\r\n***\r\n\r\n### .isArray() \r\n> Determines if the object is of type array\r\n> #### Returns\r\n> **bool** - Whether or not the object is an array\r\n> ```\r\n> [].isArray(); // true\r\n> {}.isArray(); // false\r\n> ```\r\n\r\n# LinkedHashMap\r\n\r\nAn ordered HashMap.\r\n\r\n### .clear()\r\n> Empties the entire hashmap\r\n> ```\r\n> lhm.put('key', 'value');\r\n> lhm.size(); // 1\r\n> lhm.clear();\r\n> lhm.size(); // 0\r\n> ```\r\n\r\n***\r\n\r\n### .size()\r\n> Gets the number of elements in the hashmap\r\n> #### Returns\r\n> **int** - The number of elements in the hashmap\r\n> ```\r\n> lhm.size(); // 0\r\n> lhm.put('key', 'value');\r\n> lhm.size(); // 1\r\n> ```\r\n\r\n***\r\n\r\n### .isEmpty()\r\n> Determines if there are zero elements in the hashmap\r\n> #### Returns\r\n> **bool** - Whether or not there are zero elements in the hashmap\r\n> ```\r\n> lhm.isEmpty(); // true\r\n> lhm.put('key', 'value');\r\n> lhm.isEmpty(); // false\r\n> lhm.clear();\r\n> lhm.isEmpty(); // true\r\n> ```\r\n\r\n***\r\n\r\n### .put( key, value )\r\n> Adds a key and value pair to the hashmap. The elements in the hashmap are stored in the order they were added.\r\n> #### Arguments\r\n> **key** - key with which the specified value is to be associated\r\n> **value** - value to be associated with the specified key\r\n> #### Returns\r\n> **object** - the previous value associated with key or null if there was no mapping for key\r\n> ```\r\n> lhm.put('key', 'value'); // null\r\n> lhm.get('key'); // 'value'\r\n> lhm.put('key', 'value2'); // 'value'\r\n> lhm.size(); // 1\r\n> ```\r\n\r\n***\r\n\r\n### .remove( key )\r\n> Removes the value associated with this key.\r\n> #### Arguments\r\n> **key** - key for which to remove the associated value\r\n> #### Returns\r\n> **object** - the value that just got removed or null if there was no mapping for the key\r\n> ```\r\n> lhm.put('key', 'value');\r\n> lhm.get('key'); // 'value'\r\n> lhm.get('key2'); // null\r\n> ```\r\n\r\n***\r\n\r\n### .get( key )\r\n> Gets the value associate with this key, or null if there is no mapping for the key.\r\n> #### Arguments\r\n> **key** - key for which to search for an associated value\r\n> #### Returns\r\n> **object** - the value associated with key or null if there was no mapping for key\r\n> ```\r\n> lhm.put('key', 'value');\r\n> lhm.get('key'); // 'value'\r\n> lhm.get('key2'); // null\r\n> ```\r\n\r\n***\r\n\r\n### .containsKey( key )\r\n> Determines if there is a value mapping for this key in the hashmap.\r\n> #### Arguments\r\n> **key** - key to search for\r\n> #### Returns\r\n> **bool** - whether or not there is a value mapping for this key\r\n> ```\r\n> lhm.containsKey('key'); // false\r\n> lhm.put('key', 'value');\r\n> lhm.containsKey('key'); // true\r\n> lhm.containsKey('key2'); // false\r\n> ```\r\n\r\n***\r\n\r\n### .peekFirst()\r\n> Retrieves the first value added to the hashmap\r\n> #### Returns\r\n> **object** - the first value added to the hashmap or null if the hashmap is empty\r\n> ```\r\n> lhm.peekFirst(); // null\r\n> lhm.put('key', 'value');\r\n> lhm.peekFirst(); // 'value'\r\n> lhm.put('key2', 'value2');\r\n> lhm.peekFirst(); // 'value'\r\n> lhm.remove('key');\r\n> lhm.peekFirst(); // 'value2'\r\n> ```\r\n\r\n***\r\n\r\n### .peekLast()\r\n> Retrieves the last value added to the hashmap\r\n> #### Returns\r\n> **object** - the last value added to the hashmap or null if the hashmap is empty\r\n> ```\r\n> lhm.peekLast(); // null\r\n> lhm.put('key', 'value');\r\n> lhm.peekLast(); // 'value'\r\n> lhm.put('key2', 'value2');\r\n> lhm.peekLast(); // 'value2'\r\n> lhm.remove('key2');\r\n> lhm.peekLast(); // 'value'\r\n> ```\r\n\r\n***\r\n\r\n### .values()\r\n> Retrieves an ordered list of the added values\r\n> #### Returns\r\n> **array** - the ordered list of the added values\r\n> ```\r\n> lhm.values(); // []\r\n> lhm.put('key', 'value');\r\n> lhm.put('key2', 'value2');\r\n> lhm.put('key3', 'value3');\r\n> lhm.values(); // ['value', 'value2', 'value3']\r\n> ```","tagline":"Grabbag of JavaScript utilities that should exist by default.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"screwdriver.js","google":""}